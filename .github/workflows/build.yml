name: Build and Test

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        build_type: [Debug, Release]
        
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: '5.15.2'
        
    - name: Install Dependencies (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libpcap-dev libgtest-dev
        
    - name: Install Dependencies (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install libpcap googletest
        
    - name: Install Dependencies (Windows)
      if: runner.os == 'Windows'
      run: |
        choco install winpcap
        # Setup Google Test for Windows
        git clone https://github.com/google/googletest.git
        cd googletest
        cmake -B build -DCMAKE_INSTALL_PREFIX=${{github.workspace}}/gtest_install
        cmake --build build --config ${{ matrix.build_type }} --target install
    
    - name: Configure CMake (Linux/macOS)
      if: runner.os != 'Windows'
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{matrix.build_type}}
      
    - name: Configure CMake (Windows)
      if: runner.os == 'Windows'
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{matrix.build_type}} -DGTEST_ROOT=${{github.workspace}}/gtest_install
      
    - name: Build
      run: cmake --build ${{github.workspace}}/build --config ${{matrix.build_type}}
      
    - name: Test
      working-directory: ${{github.workspace}}/build
      run: ctest -C ${{matrix.build_type}}
      
  static-analysis:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y clang-tidy cppcheck
        
    - name: Run Clang-Tidy
      run: |
        find src -name "*.cpp" -o -name "*.h" | xargs clang-tidy -p build
        
    - name: Run Cppcheck
      run: |
        cppcheck --enable=all --suppress=missingIncludeSystem src/

  code-coverage:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Qt
      uses: jurplel/install-qt-action@v3
      with:
        version: '5.15.2'
    
    - name: Install Dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libpcap-dev libgtest-dev lcov
        
    - name: Configure CMake with Coverage
      run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=Debug -DENABLE_COVERAGE=ON
      
    - name: Build
      run: cmake --build ${{github.workspace}}/build
      
    - name: Run Tests with Coverage
      working-directory: ${{github.workspace}}/build
      run: |
        ctest
        lcov --capture --directory . --output-file coverage.info
        lcov --remove coverage.info '/usr/*' --output-file coverage.info
        lcov --list coverage.info
        
    - name: Upload Coverage Report
      uses: codecov/codecov-action@v2
      with:
        files: ${{github.workspace}}/build/coverage.info